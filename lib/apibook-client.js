// Generated by CoffeeScript 1.8.0
(function() {
  var baseUrl, cache, config, getAppById, getAppsByUser, request, _getFromApibook;

  request = require('request');

  cache = require('memory-cache');

  config = require('config');

  baseUrl = config.get('apibook.apiBaseUrl');

  _getFromApibook = function(path, opt, callback) {
    var requestUrl;
    requestUrl = baseUrl + path;
    if (!opt) {
      opt = {};
    }
    if (cache.get(requestUrl)) {
      return callback(cache.get(requestUrl));
    } else {
      return request.get(requestUrl, function(error, response, body) {
        if (!error && response.statusCode === 200) {
          if (opt.cacheTime <= 0) {
            opt.cacheTime = 60000;
          }
          cache.put(requestUrl, body, opt.cacheTime);
          return callback(null, body);
        } else {
          return callback(error);
        }
      });
    }
  };

  getAppsByUser = function(userId, callback) {
    var opt;
    opt = {
      cacheTime: 500
    };
    return _getFromApibook("/apps/findByDaumUser?userId=" + userId, opt, function(err, apps) {
      var e;
      if (err != null) {
        return callback(err);
      }
      try {
        return callback(null, JSON.parse(apps));
      } catch (_error) {
        e = _error;
        return callback(e);
      }
    });
  };

  getAppById = function(appId, callback) {
    var opt;
    opt = {
      cacheTime: 500
    };
    return _getFromApibook("/apps/" + appId, opt, function(err, app) {
      var e;
      if (err != null) {
        return callback(err);
      }
      try {
        return callback(null, JSON.parse(app));
      } catch (_error) {
        e = _error;
        return callback(e);
      }
    });
  };

  module.exports = {
    getAppsByUser: getAppsByUser,
    getAppById: getAppById
  };

}).call(this);
